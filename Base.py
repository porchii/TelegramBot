import sqlite3
import telegram
import aioschedule
import threading
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode, ReplyKeyboardRemove
from aiogram.types import InputFile
from io import BytesIO
import config as cfg
from tabulate import tabulate
from database import ScheduleBot
from teachers_ import Teachers
import asyncio
from datetime import datetime
import time
import pyexcel_ods3
from newsdata import NewsData
import functools

bot = Bot(cfg.TOKEN_API)
dp = Dispatcher(bot)
schedule_bot = ScheduleBot()
newsdata_bot = NewsData()
teacher_subjects = Teachers()

async def good_morning():
    for class_name in cfg.class_chats:
        await bot.send_message(cfg.class_chats[class_name], '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üìö‚ú® –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º–∏ –∏ —É—Å–ø–µ—à–Ω—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏! üí™üåÖ –£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üöÄ')

async def on_startup(dp):
    print("–î–∞!")

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –°–∏–∞ - —Ç–≤–æ–π —à–∫–æ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å! üòä\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –Ω–∞ —á—Ç–æ —è —Å–ø–æ—Å–æ–±–Ω–∞, –≤–≤–µ–¥–∏ /help')
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmI1l4zjANitXFQ3WYCD6lAWfCHCzGwACAicAAk6MIEryF51-qbPiLTQE')
    await bot.delete_message(message.chat.id, message.message_id)

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer("<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" \
                         "<b>/start</b> - <i>–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.</i>\n" \
                         "<b>/help</b> - <i>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è.</i>\n" \
                         "<b>/description</b> - <i>–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞</i>\n" \
                         "<b>/class</b> [–ö–ª–∞—Å—Å(–§–æ—Ä–º–∞—Ç: 10.2)] - <i>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞.</i>\n" \
                         "<b>/teacher</b> [–§.–ò.–û(–§–æ—Ä–º–∞—Ç(–§–∞–º–∏–ª–∏—è_–ò_–û))] - <i>–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—á–∏—Ç–µ–ª—è.</i>\n" \
                         "<b>/update</b> - <i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π.</i>\n" \
                         "<b>/clear</b> - <i>–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É</i>\n" \
                         "<b>/news</b> - <i>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.</i>\n" \
                         "<b>/add_news</b> [–∑–∞–≥–æ–ª–æ–≤–æ–∫] [—Ç–µ–∫—Å—Ç] - <i>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å.</i>\n" \
                         "<b>/clear_news</b> - <i>–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.</i>\n" \
                         "<b>/photo</b> - <i>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.</i>\n", parse_mode=ParseMode.HTML)
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmI9l4zkafaYNlBuzqJDvRB2ahn-P-QACMiYAAn8ZKEpL8r0dbah9sTQE')
    await bot.delete_message(message.chat.id, message.message_id)

@dp.message_handler(commands=['description'])
async def description(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø - –°–∏–∞, —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. ü§ñ\n\n" \
                         "<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n" \
                         "1. <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Ç—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –≤ –∫—É—Ä—Å–µ —Å–≤–æ–∏—Ö –∑–∞–Ω—è—Ç–∏–π.\n"
                         "2. <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:</b> –¢—ã –±–æ–ª—å—à–µ –Ω–µ —É–ø—É—Å—Ç–∏—à—å –Ω–∏ –æ–¥–Ω–æ –≤–∞–∂–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! –Ø –±—É–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –≤ —à–∫–æ–ª–µ.\n\n" \
                         "–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞, —É—á–∏—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º).\n\n" \
                         "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏ /help. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —É—á–µ–±–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å –°–∏–∞! üòä", parse_mode=ParseMode.HTML)
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJFl4zkwa-GjAelL8GZweMNyITR2uAACXiQAAvB-KUoRWB6wYUjbSTQE')
    await bot.delete_message(message.chat.id, message.message_id)

async def get_schedule(message: types.Message, class_type: str, class_name: str):
    try:
        if not class_name:
            await message.answer("–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª–∞—Å—Å –∏–ª–∏ —É—á–∏—Ç–µ–ª—å.", parse_mode=ParseMode.HTML)
            return

        class_schedule = schedule_bot.get_schedule(class_type, class_name)

        if not class_schedule:
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üò¢", parse_mode=ParseMode.HTML)
            return
        table_data = []
        current = 0
        if (class_type == 'teacher'):
            for i in range(0, len(class_schedule)):
                if (i == 0 or class_schedule[i - 1][2] != class_schedule[i][2]):
                    current += 1
                table_data.append((current, f'{class_schedule[i][1]}-{class_schedule[i][2]}', class_schedule[i][3], class_schedule[i][5]))
            table = tabulate(table_data, headers=["‚Ññ", "–í—Ä–µ–º—è", "–ü—Ä–µ–¥–º–µ—Ç", "–ö–ª–∞—Å—Å"], tablefmt="presto")


        if (class_type == 'class'):
            for i in range(0, len(class_schedule)):
                if (i == 0 or class_schedule[i - 1][2] != class_schedule[i][2]):
                    current += 1
                table_data.append((current, f'{class_schedule[i][1]}-{class_schedule[i][2]}', class_schedule[i][3]))
            table = tabulate(table_data, headers=["‚Ññ", "–í—Ä–µ–º—è", "–ü—Ä–µ–¥–º–µ—Ç"], tablefmt="presto")

        code_block = f"```\n{table}\n```"
        return code_block


    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['class'])
async def get_schedule_class(message: types.Message):
    class_name = message.get_args()
    table = await get_schedule(message, 'class', class_name)
    await bot.send_message(message.chat.id, table, parse_mode=ParseMode.MARKDOWN)
    await bot.delete_message(message.chat.id, message.message_id)

@dp.message_handler(commands=['teacher'])
async def get_schedule_teacher(message: types.Message):
    teacher_name = message.get_args()
    table = await get_schedule(message, 'teacher', teacher_name)
    await bot.send_message(message.chat.id, table, parse_mode=ParseMode.MARKDOWN)
    await bot.delete_message(message.chat.id, message.message_id)

async def reminde(subject, time_b, time_e, class_name):
    await bot.send_message(cfg.class_chats[class_name], f'–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ {subject} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {time_e}')

async def create_new_schedule():
    rows = schedule_bot.get_table()
    send_good_morning = functools.partial(
        good_morning
    )
    aioschedule.every().day.at('07:00').do(send_good_morning)
    for i in range(len(rows) - 1):
        if rows[i + 1][5] == rows[i][5]:
            reminder_partial = functools.partial(
                reminde,
                subject=rows[i + 1][3],
                time_b=rows[i][2],
                time_e=rows[i + 1][1],
                class_name=rows[i][5]
            )
            aioschedule.every().day.at(rows[i][2]).do(reminder_partial)
    
async def print_all_jobs():
    print("All jobs:")
    for job in aioschedule.jobs:
        print(job)

@dp.message_handler(commands=['update'])
async def update(message: types.Message):
    if message.from_user.id in cfg.admins:
        schedule_bot.update()
        aioschedule.clear()
        await create_new_schedule()
        await print_all_jobs()
        await message.reply('–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! üóìÔ∏è', parse_mode=ParseMode.HTML)
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üò†", parse_mode=ParseMode.HTML)
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJNl4zlg8dOwXM90YWxGA5IgbjhiYAACHyEAAld_KEosM1AOHIFh3jQE')
        await bot.delete_message(message.from_user.id, message.message_id)


@dp.message_handler(commands=['clear'])
async def clear(message: types.Message):
    if message.from_user.id in cfg.admins:
        schedule_bot.restore_schedule()
        aioschedule.clear()
        await message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é! üóëÔ∏è', parse_mode=ParseMode.HTML)
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJVl4zn1Sv9hUyEo8QLGGkB6_Jq9mwACZSYAAmgMKEpujN9gfJg6njQE')
        await bot.delete_message(message.from_user.id, message.message_id)
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üò†", parse_mode=ParseMode.HTML)
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJNl5zlg8dOwXM90YWxGA5IgbjhiYAACHyEAAld_KEosM1AOHIFh3jQE')
        await bot.delete_message(message.from_user.id, message.message_id)

@dp.message_handler(commands=['news'])
async def get_news(message: types.Message):
    news = newsdata_bot.get_news()
    if not news:
        await message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç. üò¢", parse_mode=ParseMode.HTML)
        await bot.delete_message(message.chat.id, message.message_id)
    else:
        formatted_news = "\n".join([f"{row[2]}\n\n {row[2]}" for row in news])
        await message.answer(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: \n\n {formatted_news}", parse_mode=ParseMode.HTML)
        await bot.delete_message(message.chat.id, message.message_id)

@dp.message_handler(commands=['add_news'])
async def add_news_command(message: types.Message):
    if message.from_user.id not in cfg.admins:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üò†", parse_mode=ParseMode.HTML)
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJNl5zlg8dOwXM90YWxGA5IgbjhiYAACHyEAAld_KEosM1AOHIFh3jQE')
        await bot.delete_message(message.chat.id, message.message_id)
    else:
        args = message.get_args().split(' ', 2)
        if len(args) != 3:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_news [–∑–∞–≥–æ–ª–æ–≤–æ–∫] [—Ç–µ–∫—Å—Ç]", parse_mode=ParseMode.HTML)
            await bot.delete_message(message.chat.id, message.message_id)
        else:
            header, text_ = args
            newsdata_bot.add_news(header, text_)
            await message.answer(f"–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: \n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {header}\n–¢–µ–∫—Å—Ç: {text_} üòä", parse_mode=ParseMode.HTML)
            await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJVl4zn1Sv9hUyEo8QLGGkB6_Jq9mwACZSYAAmgMKEpujN9gfJg6njQE')
            await bot.delete_message(message.chat.id, message.message_id)

@dp.message_handler(commands=['clear_news'])
async def clear_news(message: types.Message):
    if message.from_user.id not in cfg.admins:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üò†", parse_mode=ParseMode.HTML)
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJNl4zlg8dOwXM90YWxGA5IgbjhiYAACHyEAAld_KEosM1AOHIFh3jQE')
        await bot.delete_message(message.chat.id, message.message_id)
    else:
        newsdata_bot.clear_news()
        await message.answer('–ù–æ–≤–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã! üóëÔ∏è', parse_mode=ParseMode.HTML);
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELmJVl4zn1Sv9hUyEo8QLGGkB6_Jq9mwACZSYAAmgMKEpujN9gfJg6njQE')
        await bot.delete_message(message.chat.id, message.message_id)

@dp.message_handler(commands=['run'])
async def run_command(message: types.Message):
    for class_name in cfg.class_chats:
        await bot.send_message(cfg.class_chats[class_name], await get_schedule(message, 'class', class_name), parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(content_types=['photo'])
async def photo_command(message: types.Message):   
    if message.get_command():
        if message.from_user.id not in cfg.admins:
            await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üò†", parse_mode=ParseMode.HTML)
        else:
            photo = message.photo[-1]
            for class_chat_id in [cfg.class_chats['10.1'], cfg.class_chats['10.2']]:
                await bot.send_photo(chat_id=class_chat_id, photo=photo.file_id)
            await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç—ã 10.1 –∏ 10.2 –∫–ª–∞—Å—Å–æ–≤.")

loop = asyncio.get_event_loop()

async def scheduled_job():
    while True:
        await asyncio.sleep(1)
        await aioschedule.run_pending()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(create_new_schedule()) 
    loop.create_task(scheduled_job())
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
    loop.run_forever()